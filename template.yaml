AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Audio monitoring solution SAM template

Globals:
  Function:
    Timeout: 900
    Runtime: nodejs18.x
    MemorySize: 128
    Architectures:
      - x86_64

Parameters:
  AccountAlias:
    Type: String
    Description: "Account alias for all AWS resources"

  RegionPrefix:
    Type: String
    Description: "Region prefix for all AWS resources"

  Stage:
    Type: String
    Description: "Current stage of the deployment"

  LambdaRoleArn:
    Type: String
    Description: "Role used for all lambda functions"

  ConnectInstanceId:
    Type: String
    Description: "Amazon Connect instance ID"

  ConnectInstanceAlias:
    Type: String
    Description: "Amazon Connect instance alias"

  ConnectLogGroup:
    Type: String
    Description: "Amazon Connect log group"

  CallRecordingsBucket:
    Type: String
    Description: "Name of S3 bucket for call recordings"

  StepFunctionRoleArn:
    Type: String
    Description: "Role used for the step function"

Resources:
  # Storage
  CallRecordingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${RegionPrefix}-${Stage}-call-recordings"
      AttributeDefinitions:
        - AttributeName: ContactId
          AttributeType: String
      KeySchema:
        - AttributeName: ContactId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  CallRecordingsMonitoringBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-call-recordings-monitoring"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SubscriptionFilterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-subscription-filter-handler"
      CodeUri: src/subFilterHandler
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          DDB_TABLE: !Ref CallRecordingTable

  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      LogGroupName: !Ref ConnectLogGroup
      DestinationArn: !GetAtt SubscriptionFilterFunction.Arn
      FilterPattern: ""
      FilterName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-subscription-filter"

  StartStateMachineFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-start-state-machine"
      CodeUri: src/startStateMachine
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref CallRecordingStateMachine
      Events:
        PerioidicInvoke:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0/2 * * * ? *)

  UpdateInitialisedRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-update-initialised-records"
      CodeUri: src/updateInitialisedRecords
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          DDB_TABLE: !Ref CallRecordingTable
          CONNECT_ID: !Ref ConnectInstanceId

  CleanTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-clean-table"
      CodeUri: src/cleanTable
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          DDB_TABLE: !Ref CallRecordingTable

  UpdateInProgressRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-update-in-progress"
      CodeUri: src/updateInProgressRecords
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          DDB_TABLE: !Ref CallRecordingTable
          CONNECT_ID: !Ref ConnectInstanceId

  UpdateCompletedRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-update-completed"
      CodeUri: src/updateCompletedRecords
      Handler: index.handler
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          DDB_TABLE: !Ref CallRecordingTable
          RECORDING_BUCKET: !Ref CallRecordingsBucket
          CONNECT_ALIAS: !Ref ConnectInstanceAlias

  CallRecordingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: "STANDARD"
      Name: !Sub "${AccountAlias}-${RegionPrefix}-${Stage}-call-recording-state-machine"
      DefinitionUri: state-machine-asl.json
      Role: !Ref StepFunctionRoleArn
      DefinitionSubstitutions:
        UpdateInitialisedRecordsFunction: !GetAtt UpdateInitialisedRecordsFunction.Arn
        CleanTableFunction: !GetAtt CleanTableFunction.Arn
        UpdateInProgressRecordsFunction: !GetAtt UpdateInProgressRecordsFunction.Arn
        UpdateCompletedRecordsFunction: !GetAtt UpdateCompletedRecordsFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt CallRecordingStateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL

  CallRecordingStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/stepfunctions/call-recording-state-machine"
      RetentionInDays: 7

  #  CloudWatchLogsLambdaInvokeRole:
  #    Type: AWS::IAM::Role
  #    Properties:
  #      RoleName: !Sub '${RegionPrefix}-${Stage}-cloudwatch-logs-lambda-invoke-role'
  #      AssumeRolePolicyDocument:
  #        Version: '2012-10-17'
  #        Statement:
  #          - Effect: Allow
  #            Principal:
  #              Service:
  #                - logs.amazonaws.com
  #            Action:
  #              - 'sts:AssumeRole'
  #      Policies:
  #        - PolicyName: 'CloudWatchLogsLambdaInvokePolicy'
  #          PolicyDocument:
  #            Version: '2012-10-17'
  #            Statement:
  #              - Effect: Allow
  #                Action:
  #                  - 'lambda:InvokeFunction'
  #                Resource: '*'

  LambdaResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt SubscriptionFilterFunction.Arn
      Principal: "logs.amazonaws.com"
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ConnectLogGroup}:*"
